# declaring fixed parameters ######################################################################
# demographic properties
r = 1
baseline_K = 30
c = 0.1 # allee effect threshold == 0 --> the model is just a logistic growth
k_sd = 0.15
mu = 0.1
# timestep for the stochastic integration
dt = 0.01
t = seq(0, 1000, 1) # time seq for integration
# noise properties:
noise_amplitude = 0.02
dist_cov = 0.1
# reading the network #######################################################################
network_id = 1
network = read_network(paste0("../Fig_noisy_dynamics/Network_list/RGG_", network_id))
disp_matrix = network$dispersal_matrix
n_patch = ncol(disp_matrix)
# updating covariance matrix
network$cov_matrix = make_cov_matrix(network, dist_cov)*noise_amplitude # making a cov matrix of correlation distance dist_cov
network$summary$covariance_distance = dist_cov
W = network$dispersal_matrix*mu # scaling the disp_matrix by mu
# computing the odsr
odsr.object = odsr(W, type = 'stochastic', cov_matrix = network$cov_matrix)
if (Re(odsr.object$alpha) < 0 ){
odsr.object = odsr(W, type = 'stochastic', cov_matrix = network$cov_matrix, n_eig = 2)
}
odsr.object$a = sapply(odsr.object$a, Re)
odsr.object$alpha = Re(odsr.object$alpha)
odsr.object$alpha.out = Re(odsr.object$alpha.out)
odsr.object$beta = Re(odsr.object$beta)
odsr.object$cov = Re(odsr.object$cov)
# simulations ##############################################################################
x_init = rnorm(n_patch, baseline_K, 0.1*baseline_K)
K_vect = rnorm(n_patch, baseline_K, baseline_K * k_sd)
K_vect = K_vect * (K_vect > 0)
par = list(r = r,
K = K_vect,
c = c)
out = ode(y = x_init,
times = t,
func = metapop_dynamics_stochastic,
parms = par,
growth_function = logistic_allee,
dispersal_function = linear_dispersal,
W = W,
Cov = network$cov_matrix/dt,
method = "euler",
hini = dt)
odsr.out = odsr.dynamics(times = t,
x = x_init,
growth_function = logistic_allee,
dispersal_function = linear_dispersal,
odsr.object = odsr.object,
par = par,
dt = dt)
## preparing data frames for the plots ############################################################################
# data frame of full dynamics
data_dynamics = data.frame(t = 0, biomass = 0, patch = 0)
for(k in 1:n_patch){
temp_data = data.frame(t = out[,1], biomass = out[,k+1], patch = k)
data_dynamics = rbind(data_dynamics, temp_data)
}
data_dynamics = data_dynamics[-1,]
# data frame of reduced dynamics
x = out[,2:ncol(out)]
x_reduced = x %*% odsr.object$a
data_x_reduced = data.frame(t = data_dynamics$t, x_reduced)
# data frame of R dynamics
data_R = data.frame(t = odsr.out[,1], R = odsr.out[,2])
## plotting dynamics panels #######################################################################
panel_full_dynamics = ggplot() +
geom_line(data = data_dynamics[data_dynamics$patch %in% seq(1, 4),], mapping = aes(x = t, y = biomass, group = patch), alpha = 0.15) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lwd = 0.5) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
panel_R_dynamics = ggplot() +
geom_line(data = data_R, mapping = aes(x = t, y = R), color = '#1E88E5', lwd = 0.5) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lty = 'dotted', lwd = 0.5) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
## plotting the network #########################################################################
plot_network = function(network, color_vect){
# extracting the number of patches
n_patch = network$summary$n_patch
# dataframe of point coordinates
points = network$points_coords
points$size = 1
# finding out which point is the most centered
center.x = mean(points$x)
center.y = mean(points$y)
distance = sqrt((points$x - center.x)**2 + (points$y - center.y)**2)
center_index = which(distance == min(distance))
points$color = color_vect
# making a dataframe of link coordinates
links = data.frame(x = 0, y = 0, link = 0, weight = 0)
link = 0
W = network$dispersal_matrix
for(k in 1:(n_patch-1)){
for(l in (k+1):n_patch){
if(W[k,l]>0){
link = link+1
# making a dataframe of link coordinates
temp_data = data.frame(x = points[c(k, l), 1], y = points[c(k,l), 2], link = link, weight = (W[k,l] + W[l,k])/2)
links = rbind(links, temp_data)
}
}
}
return(ggplot() +
geom_line(data = links, mapping = aes(x = x, y = y, group = link), color = "grey", size = 1) +
geom_point(data = points, mapping = aes(x = x, y = y, color = color), size = 5) +
labs(x="",y="",color="Biomass", size="Weight") +
theme_classic() +
labs(x="",y="") +
theme(axis.text.x = element_blank(),legend.position="bottom",
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line = element_line(colour = "white")) +
xlim(min(points$x) - 0.1, max(points$x) + 0.1) +
ylim(min(points$y) - 0.1, max(points$y) + 0.1) +
scale_color_continuous(low = 'black', high = "#D81B60") +
guides(size = "none", color = 'none'))
}
panel_network = plot_network(network, x_init)
panel_network
## saving the panels ######################################################################
ggsave('panel_network.pdf', panel_network, width = 60, height = 60, unit = 'mm')
ggsave('panel_full.pdf', panel_full_dynamics, width = 60, height = 40, unit = 'mm')
ggsave('panel_R.pdf', panel_R_dynamics, width = 60, height = 40, unit = 'mm')
panel_R_dynamics = ggplot() +
geom_line(data = data_R, mapping = aes(x = t, y = R), color = '#1E88E5', lwd = 0.5) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lwd = 0.1) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
ggsave('panel_full.pdf', panel_full_dynamics, width = 60, height = 40, unit = 'mm')
ggsave('panel_R.pdf', panel_R_dynamics, width = 60, height = 40, unit = 'mm')
panel_R_dynamics = ggplot() +
geom_line(data = data_R, mapping = aes(x = t, y = R), color = '#1E88E5', lwd = 0.5) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lwd = 0.1) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
# a script that tests the one-dimensional spectral reduction over a list of networks
# sources and libraries ####################################################################
rm(list = ls())
library(deSolve)
library(igraph)
library(parallel)
library(stats)
# functions for the reduction
source("../one_dimension_spectral_reduction.R")
# functions for dynamics
source("../Dynamics/metapop_dynamics.R")
source("../Dynamics/Growth_functions.R")
source("../Dynamics/Dispersal_functions.R")
source("../Networks/Network_functions.R")
# declaring fixed parameters ######################################################################
# demographic properties
r = 1
baseline_K = 30
c = 0.1 # allee effect threshold == 0 --> the model is just a logistic growth
k_sd = 0.15
mu = 0.1
# timestep for the stochastic integration
dt = 0.01
t = seq(0, 1000, 1) # time seq for integration
# noise properties:
noise_amplitude = 0.02
dist_cov = 0.1
# reading the network #######################################################################
network_id = 1
network = read_network(paste0("../Fig_noisy_dynamics/Network_list/RGG_", network_id))
disp_matrix = network$dispersal_matrix
n_patch = ncol(disp_matrix)
# updating covariance matrix
network$cov_matrix = make_cov_matrix(network, dist_cov)*noise_amplitude # making a cov matrix of correlation distance dist_cov
network$summary$covariance_distance = dist_cov
W = network$dispersal_matrix*mu # scaling the disp_matrix by mu
# computing the odsr
odsr.object = odsr(W, type = 'stochastic', cov_matrix = network$cov_matrix)
if (Re(odsr.object$alpha) < 0 ){
odsr.object = odsr(W, type = 'stochastic', cov_matrix = network$cov_matrix, n_eig = 2)
}
odsr.object$a = sapply(odsr.object$a, Re)
odsr.object$alpha = Re(odsr.object$alpha)
odsr.object$alpha.out = Re(odsr.object$alpha.out)
odsr.object$beta = Re(odsr.object$beta)
odsr.object$cov = Re(odsr.object$cov)
# simulations ##############################################################################
x_init = rnorm(n_patch, baseline_K, 0.1*baseline_K)
K_vect = rnorm(n_patch, baseline_K, baseline_K * k_sd)
K_vect = K_vect * (K_vect > 0)
par = list(r = r,
K = K_vect,
c = c)
out = ode(y = x_init,
times = t,
func = metapop_dynamics_stochastic,
parms = par,
growth_function = logistic_allee,
dispersal_function = linear_dispersal,
W = W,
Cov = network$cov_matrix/dt,
method = "euler",
hini = dt)
odsr.out = odsr.dynamics(times = t,
x = x_init,
growth_function = logistic_allee,
dispersal_function = linear_dispersal,
odsr.object = odsr.object,
par = par,
dt = dt)
## preparing data frames for the plots ############################################################################
# data frame of full dynamics
data_dynamics = data.frame(t = 0, biomass = 0, patch = 0)
for(k in 1:n_patch){
temp_data = data.frame(t = out[,1], biomass = out[,k+1], patch = k)
data_dynamics = rbind(data_dynamics, temp_data)
}
data_dynamics = data_dynamics[-1,]
# data frame of reduced dynamics
x = out[,2:ncol(out)]
x_reduced = x %*% odsr.object$a
data_x_reduced = data.frame(t = data_dynamics$t, x_reduced)
# data frame of R dynamics
data_R = data.frame(t = odsr.out[,1], R = odsr.out[,2])
## plotting dynamics panels #######################################################################
panel_full_dynamics = ggplot() +
geom_line(data = data_dynamics[data_dynamics$patch %in% seq(1, 4),], mapping = aes(x = t, y = biomass, group = patch), alpha = 0.15) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lwd = 0.5) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
panel_R_dynamics = ggplot() +
geom_line(data = data_R, mapping = aes(x = t, y = R), color = '#1E88E5', lwd = 0.5) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lwd = 0.1) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
## plotting the network #########################################################################
plot_network = function(network, color_vect){
# extracting the number of patches
n_patch = network$summary$n_patch
# dataframe of point coordinates
points = network$points_coords
points$size = 1
# finding out which point is the most centered
center.x = mean(points$x)
center.y = mean(points$y)
distance = sqrt((points$x - center.x)**2 + (points$y - center.y)**2)
center_index = which(distance == min(distance))
points$color = color_vect
# making a dataframe of link coordinates
links = data.frame(x = 0, y = 0, link = 0, weight = 0)
link = 0
W = network$dispersal_matrix
for(k in 1:(n_patch-1)){
for(l in (k+1):n_patch){
if(W[k,l]>0){
link = link+1
# making a dataframe of link coordinates
temp_data = data.frame(x = points[c(k, l), 1], y = points[c(k,l), 2], link = link, weight = (W[k,l] + W[l,k])/2)
links = rbind(links, temp_data)
}
}
}
return(ggplot() +
geom_line(data = links, mapping = aes(x = x, y = y, group = link), color = "grey", size = 1) +
geom_point(data = points, mapping = aes(x = x, y = y, color = color), size = 5) +
labs(x="",y="",color="Biomass", size="Weight") +
theme_classic() +
labs(x="",y="") +
theme(axis.text.x = element_blank(),legend.position="bottom",
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line = element_line(colour = "white")) +
xlim(min(points$x) - 0.1, max(points$x) + 0.1) +
ylim(min(points$y) - 0.1, max(points$y) + 0.1) +
scale_color_continuous(low = 'black', high = "#D81B60") +
guides(size = "none", color = 'none'))
}
panel_network = plot_network(network, x_init)
panel_network
## saving the panels ######################################################################
ggsave('panel_network.pdf', panel_network, width = 60, height = 60, unit = 'mm')
ggsave('panel_full.pdf', panel_full_dynamics, width = 60, height = 40, unit = 'mm')
ggsave('panel_R.pdf', panel_R_dynamics, width = 60, height = 40, unit = 'mm')
panel_R_dynamics = ggplot() +
geom_line(data = data_R, mapping = aes(x = t, y = R), color = '#1E88E5', lwd = 0.5) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lwd = 0.25) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
plot_network = function(network, color_vect){
# extracting the number of patches
n_patch = network$summary$n_patch
# dataframe of point coordinates
points = network$points_coords
points$size = 1
# finding out which point is the most centered
center.x = mean(points$x)
center.y = mean(points$y)
distance = sqrt((points$x - center.x)**2 + (points$y - center.y)**2)
center_index = which(distance == min(distance))
points$color = color_vect
# making a dataframe of link coordinates
links = data.frame(x = 0, y = 0, link = 0, weight = 0)
link = 0
W = network$dispersal_matrix
for(k in 1:(n_patch-1)){
for(l in (k+1):n_patch){
if(W[k,l]>0){
link = link+1
# making a dataframe of link coordinates
temp_data = data.frame(x = points[c(k, l), 1], y = points[c(k,l), 2], link = link, weight = (W[k,l] + W[l,k])/2)
links = rbind(links, temp_data)
}
}
}
return(ggplot() +
geom_line(data = links, mapping = aes(x = x, y = y, group = link), color = "grey", size = 1) +
geom_point(data = points, mapping = aes(x = x, y = y, color = color), size = 5) +
labs(x="",y="",color="Biomass", size="Weight") +
theme_classic() +
labs(x="",y="") +
theme(axis.text.x = element_blank(),legend.position="bottom",
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line = element_line(colour = "white")) +
xlim(min(points$x) - 0.1, max(points$x) + 0.1) +
ylim(min(points$y) - 0.1, max(points$y) + 0.1) +
scale_color_continuous(low = 'black', high = "#D81B60") +
guides(size = "none", color = 'none'))
}
panel_network = plot_network(network, x_init)
panel_network
## saving the panels ######################################################################
ggsave('panel_network.pdf', panel_network, width = 60, height = 60, unit = 'mm')
ggsave('panel_full.pdf', panel_full_dynamics, width = 60, height = 40, unit = 'mm')
ggsave('panel_R.pdf', panel_R_dynamics, width = 60, height = 40, unit = 'mm')
# a script that tests the one-dimensional spectral reduction over a list of networks
# sources and libraries ####################################################################
rm(list = ls())
library(deSolve)
library(igraph)
library(parallel)
library(stats)
# functions for the reduction
source("../one_dimension_spectral_reduction.R")
# functions for dynamics
source("../Dynamics/metapop_dynamics.R")
source("../Dynamics/Growth_functions.R")
source("../Dynamics/Dispersal_functions.R")
source("../Networks/Network_functions.R")
# declaring fixed parameters ######################################################################
# demographic properties
r = 1
baseline_K = 30
c = 0.1 # allee effect threshold == 0 --> the model is just a logistic growth
k_sd = 0
mu = 0.1
# timestep for the stochastic integration
dt = 0.01
t = seq(0, 1000, 1) # time seq for integration
# noise properties:
noise_amplitude = 0.02
dist_cov = 0.1
# reading the network #######################################################################
network_id = 1
network = read_network(paste0("../Fig_noisy_dynamics/Network_list/RGG_", network_id))
disp_matrix = network$dispersal_matrix
n_patch = ncol(disp_matrix)
# updating covariance matrix
network$cov_matrix = make_cov_matrix(network, dist_cov)*noise_amplitude # making a cov matrix of correlation distance dist_cov
network$summary$covariance_distance = dist_cov
W = network$dispersal_matrix*mu # scaling the disp_matrix by mu
# computing the odsr
odsr.object = odsr(W, type = 'stochastic', cov_matrix = network$cov_matrix)
if (Re(odsr.object$alpha) < 0 ){
odsr.object = odsr(W, type = 'stochastic', cov_matrix = network$cov_matrix, n_eig = 2)
}
odsr.object$a = sapply(odsr.object$a, Re)
odsr.object$alpha = Re(odsr.object$alpha)
odsr.object$alpha.out = Re(odsr.object$alpha.out)
odsr.object$beta = Re(odsr.object$beta)
odsr.object$cov = Re(odsr.object$cov)
# simulations ##############################################################################
x_init = rnorm(n_patch, baseline_K, 0.1*baseline_K)
K_vect = rnorm(n_patch, baseline_K, baseline_K * k_sd)
K_vect = K_vect * (K_vect > 0)
par = list(r = r,
K = K_vect,
c = c)
out = ode(y = x_init,
times = t,
func = metapop_dynamics_stochastic,
parms = par,
growth_function = logistic_allee,
dispersal_function = linear_dispersal,
W = W,
Cov = network$cov_matrix/dt,
method = "euler",
hini = dt)
odsr.out = odsr.dynamics(times = t,
x = x_init,
growth_function = logistic_allee,
dispersal_function = linear_dispersal,
odsr.object = odsr.object,
par = par,
dt = dt)
## preparing data frames for the plots ############################################################################
# data frame of full dynamics
data_dynamics = data.frame(t = 0, biomass = 0, patch = 0)
for(k in 1:n_patch){
temp_data = data.frame(t = out[,1], biomass = out[,k+1], patch = k)
data_dynamics = rbind(data_dynamics, temp_data)
}
data_dynamics = data_dynamics[-1,]
# data frame of reduced dynamics
x = out[,2:ncol(out)]
x_reduced = x %*% odsr.object$a
data_x_reduced = data.frame(t = data_dynamics$t, x_reduced)
# data frame of R dynamics
data_R = data.frame(t = odsr.out[,1], R = odsr.out[,2])
## plotting dynamics panels #######################################################################
panel_full_dynamics = ggplot() +
geom_line(data = data_dynamics[data_dynamics$patch %in% seq(1, 4),], mapping = aes(x = t, y = biomass, group = patch), alpha = 0.15) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lwd = 0.5) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
panel_R_dynamics = ggplot() +
geom_line(data = data_R, mapping = aes(x = t, y = R), color = '#1E88E5', lwd = 0.5) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lwd = 0.25) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
## plotting the network #########################################################################
plot_network = function(network, color_vect){
# extracting the number of patches
n_patch = network$summary$n_patch
# dataframe of point coordinates
points = network$points_coords
points$size = 1
# finding out which point is the most centered
center.x = mean(points$x)
center.y = mean(points$y)
distance = sqrt((points$x - center.x)**2 + (points$y - center.y)**2)
center_index = which(distance == min(distance))
points$color = color_vect
# making a dataframe of link coordinates
links = data.frame(x = 0, y = 0, link = 0, weight = 0)
link = 0
W = network$dispersal_matrix
for(k in 1:(n_patch-1)){
for(l in (k+1):n_patch){
if(W[k,l]>0){
link = link+1
# making a dataframe of link coordinates
temp_data = data.frame(x = points[c(k, l), 1], y = points[c(k,l), 2], link = link, weight = (W[k,l] + W[l,k])/2)
links = rbind(links, temp_data)
}
}
}
return(ggplot() +
geom_line(data = links, mapping = aes(x = x, y = y, group = link), color = "grey", size = 1) +
geom_point(data = points, mapping = aes(x = x, y = y, color = color), size = 5) +
labs(x="",y="",color="Biomass", size="Weight") +
theme_classic() +
labs(x="",y="") +
theme(axis.text.x = element_blank(),legend.position="bottom",
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line = element_line(colour = "white")) +
xlim(min(points$x) - 0.1, max(points$x) + 0.1) +
ylim(min(points$y) - 0.1, max(points$y) + 0.1) +
scale_color_continuous(low = 'black', high = "#D81B60") +
guides(size = "none", color = 'none'))
}
panel_network = plot_network(network, x_init)
panel_network
## saving the panels ######################################################################
ggsave('panel_network.pdf', panel_network, width = 60, height = 60, unit = 'mm')
ggsave('panel_full.pdf', panel_full_dynamics, width = 60, height = 40, unit = 'mm')
ggsave('panel_R.pdf', panel_R_dynamics, width = 60, height = 40, unit = 'mm')
panel_R_dynamics = ggplot() +
geom_line(data = data_R, mapping = aes(x = t, y = R), color = '#1E88E5', lwd = 0.5) +
geom_line(data = data_x_reduced, mapping = aes(x = t, y = x_reduced), color = "#D81B60", lwd = 0.25, alpha = 0.5) +
xlim(800, 1000) +
ylim(15, 40) +
labs(x = "Time", y = "Biomass") +
theme_classic()
## saving the panels ######################################################################
ggsave('panel_network.pdf', panel_network, width = 60, height = 60, unit = 'mm')
ggsave('panel_full.pdf', panel_full_dynamics, width = 60, height = 40, unit = 'mm')
ggsave('panel_R.pdf', panel_R_dynamics, width = 60, height = 40, unit = 'mm')
