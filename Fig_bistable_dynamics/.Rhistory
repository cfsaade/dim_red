fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
theme_bw()
ggplot(data = data, mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), color = as.factor(k_sd), shape = as.factor(n_patch))) +
geom_point()
ggplot(data = data, mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), shape = as.factor(k_sd), color = as.factor(k_sd))) +
geom_point(alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), fill = as.factor(k_sd)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.3) +
stat_summary(
mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), color = as.factor(k_sd)),
fun = median,
geom = 'line') +
facet_grid(n_patch~kind) +
theme_bw()
ggplot(data = data, mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), shape = as.factor(n_patch), color = as.factor(n_patch))) +
geom_point(alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), fill = as.factor(n_patch)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.3) +
stat_summary(
mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), color = as.factor(n_patch)),
fun = median,
geom = 'line') +
facet_grid(k_sd~kind) +
theme_bw()
# density of sd
ggplot(data = data, mapping = aes(x = x_reduced_sd, color = kind, fill = kind)) +
geom_density(alpha = 0.05) +
theme_bw()
rm(list = ls())
library(ggplot2)
library(reshape2)
data = read.csv('output/0_All_data.csv', header = T)
# computing the relative absolute error of mean, sd and acf_1
#data$dist_pred = abs(data$x_reduced - data$R_predicted)/pmax(abs(data$R_predicted), abs(data$x_reduced)) # distance to predicted equilibrium
#data$dist_R_alt_1 = abs(data$x_reduced - data$R_alternative_1)/pmax(abs(data$R_alternative_1), abs(data$x_reduced)) # distance to eq 1
#data$dist_R_alt_2 = abs(data$x_reduced - data$R_alternative_2)/pmax(abs(data$R_alternative_2), abs(data$x_reduced)) # distance to eq 2
#data$dist_any = pmax(data$dist_R_alt_1, data$dist_R_alt_2)
# we compute the error relative to k, not the relative absolute error as some value go towards 0 quite fast which yields strange values in RAE
data$dist_pred = abs(data$x_reduced - data$R_predicted)/30# distance to predicted equilibrium
data$dist_R_alt_1 = abs(data$x_reduced - data$R_alternative_1)/30 # distance to eq 1
data$dist_R_alt_2 = abs(data$x_reduced - data$R_alternative_2)/30 # distance to eq 2
data$dist_any = pmin(data$dist_R_alt_1, data$dist_R_alt_2)
data_melted = melt(data,
measure.vars = c("dist_pred", 'dist_any'),
variable.name = 'Metric',
value.name = 'Relative_absolute_error')
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
theme_bw()
ggplot(data = data, mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), color = as.factor(k_sd), shape = as.factor(n_patch))) +
geom_point()
ggplot(data = data, mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), shape = as.factor(k_sd), color = as.factor(k_sd))) +
geom_point(alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), fill = as.factor(k_sd)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.3) +
stat_summary(
mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), color = as.factor(k_sd)),
fun = median,
geom = 'line') +
facet_grid(n_patch~kind) +
theme_bw()
ggplot(data = data, mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), shape = as.factor(n_patch), color = as.factor(n_patch))) +
geom_point(alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), fill = as.factor(n_patch)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.3) +
stat_summary(
mapping = aes(x = mu, y = abs(x_reduced - R)/max(R, x_reduced), color = as.factor(n_patch)),
fun = median,
geom = 'line') +
facet_grid(k_sd~kind) +
theme_bw()
# density of sd
ggplot(data = data, mapping = aes(x = x_reduced_sd, color = kind, fill = kind)) +
geom_density(alpha = 0.05) +
theme_bw()
rm(list = ls())
library(ggplot2)
library(reshape2)
data = read.csv('output/0_All_data.csv', header = T)
# computing the relative absolute error of mean, sd and acf_1
#data$dist_pred = abs(data$x_reduced - data$R_predicted)/pmax(abs(data$R_predicted), abs(data$x_reduced)) # distance to predicted equilibrium
#data$dist_R_alt_1 = abs(data$x_reduced - data$R_alternative_1)/pmax(abs(data$R_alternative_1), abs(data$x_reduced)) # distance to eq 1
#data$dist_R_alt_2 = abs(data$x_reduced - data$R_alternative_2)/pmax(abs(data$R_alternative_2), abs(data$x_reduced)) # distance to eq 2
#data$dist_any = pmax(data$dist_R_alt_1, data$dist_R_alt_2)
# we compute the error relative to k, not the relative absolute error as some value go towards 0 quite fast which yields strange values in RAE
data$dist_pred = abs(data$x_reduced - data$R_predicted)/30# distance to predicted equilibrium
data$dist_R_alt_1 = abs(data$x_reduced - data$R_alternative_1)/30 # distance to eq 1
data$dist_R_alt_2 = abs(data$x_reduced - data$R_alternative_2)/30 # distance to eq 2
data$dist_any = pmin(data$dist_R_alt_1, data$dist_R_alt_2)
data_melted = melt(data,
measure.vars = c("dist_pred", 'dist_any'),
variable.name = 'Metric',
value.name = 'Relative_absolute_error')
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
theme_bw()
# density of sd
ggplot(data = data, mapping = aes(x = x_reduced_sd, color = kind, fill = kind)) +
geom_density(alpha = 0.05) +
theme_bw()
rm(list = ls())
library(ggplot2)
library(reshape2)
data = read.csv('output/0_All_data.csv', header = T)
# computing the relative absolute error of mean, sd and acf_1
#data$dist_pred = abs(data$x_reduced - data$R_predicted)/pmax(abs(data$R_predicted), abs(data$x_reduced)) # distance to predicted equilibrium
#data$dist_R_alt_1 = abs(data$x_reduced - data$R_alternative_1)/pmax(abs(data$R_alternative_1), abs(data$x_reduced)) # distance to eq 1
#data$dist_R_alt_2 = abs(data$x_reduced - data$R_alternative_2)/pmax(abs(data$R_alternative_2), abs(data$x_reduced)) # distance to eq 2
#data$dist_any = pmax(data$dist_R_alt_1, data$dist_R_alt_2)
# we compute the error relative to k, not the relative absolute error as some value go towards 0 quite fast which yields strange values in RAE
data$dist_pred = abs(data$x_reduced - data$R_predicted)/30# distance to predicted equilibrium
data$dist_R_alt_1 = abs(data$x_reduced - data$R_alternative_1)/30 # distance to eq 1
data$dist_R_alt_2 = abs(data$x_reduced - data$R_alternative_2)/30 # distance to eq 2
data$dist_any = pmin(data$dist_R_alt_1, data$dist_R_alt_2)
data_melted = melt(data,
measure.vars = c("dist_pred", 'dist_any'),
variable.name = 'Metric',
value.name = 'Relative_absolute_error')
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
theme_bw()
hist(data$x_reduced)
hist(data$x_reduced, bin = 100)
hist(data$x_reduced, bins = 100)
hist(data$x_reduced, bins = 200)
hist(data$x_reduced, breaks = 200)
length(data$x_reduced < 10^-3)
length(data$x_reduced < 10^-2)
length(data$x_reduced < 10^-1)
length(data$x_reduced < 1)
## Defining a relative absolute functions between a pair of values that deals with values close to 0: if both values are < 10^-3, return 0
RAE = function(pair_values){
if (max(abs(pair_values)) < 10^-3){
return(0)
return(abs(pair_values[1] - pair_values[2])/max(abs(pair_values[1]), abs(pair_values[2])))
}
}
RAE(data[c('x_recuced', 'R_predicted')])
RAE(data[c('x_recuced', 'R_predicted'),])
RAE(data[,c('x_recuced', 'R_predicted')])
RAE(data[,c('x_reduced', 'R_predicted')])
## Defining a relative absolute functions between a pair of values that deals with values close to 0: if both values are < 10^-3, return 0
RAE = function(pair_values){
if (max(abs(pair_values)) < 10^-3){
return(0)
}
return(abs(pair_values[1] - pair_values[2])/max(abs(pair_values[1]), abs(pair_values[2])))
}
RAE(data[,c('x_reduced', 'R_predicted')])
a = RAE(data[,c('x_reduced', 'R_predicted')])
hist(a)
a
a[1:5,]
data[1,]
a = lapply(data[,c("x_reduced", "R_predicted")], RAE)
a
a = lapply(data[,c("x_reduced", "R_predicted")], RAE, 1)
a = lapply(data[,c("x_reduced", "R_predicted")], RAE, margin = 1)
a = apply(data[,c("x_reduced", "R_predicted")], RAE, margin = 1)
a = apply(data[,c("x_reduced", "R_predicted")], FUN = RAE, margin = 1)
a = apply(data[,c("x_reduced", "R_predicted")], FUN = RAE, MARGIN = 1)
a
hist(a)
rm(list = ls())
library(ggplot2)
library(reshape2)
data = read.csv('output/0_All_data.csv', header = T)
# computing the relative absolute error of mean, sd and acf_1
#data$dist_pred = abs(data$x_reduced - data$R_predicted)/pmax(abs(data$R_predicted), abs(data$x_reduced)) # distance to predicted equilibrium
#data$dist_R_alt_1 = abs(data$x_reduced - data$R_alternative_1)/pmax(abs(data$R_alternative_1), abs(data$x_reduced)) # distance to eq 1
#data$dist_R_alt_2 = abs(data$x_reduced - data$R_alternative_2)/pmax(abs(data$R_alternative_2), abs(data$x_reduced)) # distance to eq 2
#data$dist_any = pmax(data$dist_R_alt_1, data$dist_R_alt_2)
## Defining a relative absolute functions between a pair of values that deals with values close to 0: if both values are < 10^-3, return 0
RAE = function(pair_values){
if (max(abs(pair_values)) < 10^-3){
return(0)
}
return(abs(pair_values[1] - pair_values[2])/max(abs(pair_values[1]), abs(pair_values[2])))
}
# computing RAEs
data$dist_pred = apply(data[,c("x_reduced", "R_predicted")], FUN = RAE, margin = 1) # distance to predicted equilibrium
data$dist_R_alt_1 = apply(data[,c("x_reduced", "R_alternative_1")], FUN = RAE, margin = 1) # distance to eq 1
data$dist_R_alt_2 = apply(data[,c("x_reduced", "R_alternative_2")], FUN = RAE, margin = 1) # distance to eq 2
data$dist_any = pmin(data$dist_R_alt_1, data$dist_R_alt_2)
data_melted = melt(data,
measure.vars = c("dist_pred", 'dist_any'),
variable.name = 'Metric',
value.name = 'Relative_absolute_error')
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
theme_bw()
rm(list = ls())
library(ggplot2)
library(reshape2)
data = read.csv('output/0_All_data.csv', header = T)
## Defining a relative absolute functions between a pair of values that deals with values close to 0: if both values are < 10^-3, return 0
RAE = function(pair_values){
if (max(abs(pair_values)) < 10^-3){
return(0)
}
return(abs(pair_values[1] - pair_values[2])/max(abs(pair_values[1]), abs(pair_values[2])))
}
# computing RAEs
data$dist_pred = apply(data[,c("x_reduced", "R_predicted")], FUN = RAE, margin = 1) # distance to predicted equilibrium
# computing RAEs
data$dist_pred = apply(data[,c("x_reduced", "R_predicted")], FUN = RAE, MARGIN = 1) # distance to predicted equilibrium
data$dist_R_alt_1 = apply(data[,c("x_reduced", "R_alternative_1")], FUN = RAE, MARGIN = 1) # distance to eq 1
data$dist_R_alt_2 = apply(data[,c("x_reduced", "R_alternative_2")], FUN = RAE, MARGIN = 1) # distance to eq 2
data$dist_any = pmin(data$dist_R_alt_1, data$dist_R_alt_2)
data_melted = melt(data,
measure.vars = c("dist_pred", 'dist_any'),
variable.name = 'Metric',
value.name = 'Relative_absolute_error')
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
theme_bw()
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind, labeller = labeller(Metric = metric.lab)) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
xlab(expression(paste('Dispersal rate (', mu, ')'))) +
ylab('Relative absoulte error') +
theme_bw()
# label for panels
metric.lab = c('Distance to predicted eq.', 'distance to closest eq.')
names(metric.lab) = c('dist_pred', 'dist_any')
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind, labeller = labeller(Metric = metric.lab)) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
xlab(expression(paste('Dispersal rate (', mu, ')'))) +
ylab('Relative absoulte error') +
theme_bw()
ggplot(data = data_melted, mapping = aes(x = noise_amplitude, y = Relative_absolute_error, color = as.factor(noise_cov_dist), shape = as.factor(noise_cov_dist))) +
geom_point(alpha = 0.5) +
facet_grid(Metric ~ kind, labeller = labeller(Metric = metric.lab)) +
stat_summary(
mapping = aes(x = noise_amplitude, y = Relative_absolute_error, fill = as.factor(noise_cov_dist)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.3) +
stat_summary(
mapping = aes(x = noise_amplitude, y = Relative_absolute_error, color = as.factor(noise_cov_dist)),
fun = median,
geom = 'line') +
scale_color_discrete('Spatial autocorrelation of noise') +
scale_fill_discrete('Spatial autocorrelation of noise') +
scale_shape_discrete('Spatial autocorrelation of noise') +
xlab('Noise amplitude') +
ylab('Relative absoulte error') +
theme_bw() +
theme(legend.position = 'bottom')
rm(list = ls())
library(ggplot2)
library(reshape2)
data = read.csv('output/0_All_data.csv', header = T)
# computing the relative absolute error of mean, sd and acf_1
#data$dist_pred = abs(data$x_reduced - data$R_predicted)/pmax(abs(data$R_predicted), abs(data$x_reduced)) # distance to predicted equilibrium
#data$dist_R_alt_1 = abs(data$x_reduced - data$R_alternative_1)/pmax(abs(data$R_alternative_1), abs(data$x_reduced)) # distance to eq 1
#data$dist_R_alt_2 = abs(data$x_reduced - data$R_alternative_2)/pmax(abs(data$R_alternative_2), abs(data$x_reduced)) # distance to eq 2
#data$dist_any = pmax(data$dist_R_alt_1, data$dist_R_alt_2)
## Defining a relative absolute functions between a pair of values that deals with values close to 0: if both values are < 10^-3, return 0
RAE = function(pair_values){
if (max(abs(pair_values)) < 10^-3){
return(0)
}
return(abs(pair_values[1] - pair_values[2])/max(abs(pair_values[1]), abs(pair_values[2])))
}
# computing RAEs
data$dist_pred = apply(data[,c("x_reduced", "R_predicted")], FUN = RAE, MARGIN = 1) # distance to predicted equilibrium
data$dist_R_alt_1 = apply(data[,c("x_reduced", "R_alternative_1")], FUN = RAE, MARGIN = 1) # distance to eq 1
data$dist_R_alt_2 = apply(data[,c("x_reduced", "R_alternative_2")], FUN = RAE, MARGIN = 1) # distance to eq 2
data$dist_any = pmin(data$dist_R_alt_1, data$dist_R_alt_2)
data_melted = melt(data,
measure.vars = c("dist_pred", 'dist_any'),
variable.name = 'Metric',
value.name = 'Relative_absolute_error')
# label for panels
metric.lab = c('Distance to predicted eq.', 'distance to closest eq.')
names(metric.lab) = c('dist_pred', 'dist_any')
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind, labeller = labeller(Metric = metric.lab)) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
xlab(expression(paste('Dispersal rate (', mu, ')'))) +
ylab('Relative absoulte error') +
theme(legend.position = 'bottom') +
theme_bw()
ggsave('RAE_bistable.pdf', width = 210, height = 148, unit = 'mm')
rm(list = ls())
library(ggplot2)
library(reshape2)
data = read.csv('output/0_All_data.csv', header = T)
# computing the relative absolute error of mean, sd and acf_1
#data$dist_pred = abs(data$x_reduced - data$R_predicted)/pmax(abs(data$R_predicted), abs(data$x_reduced)) # distance to predicted equilibrium
#data$dist_R_alt_1 = abs(data$x_reduced - data$R_alternative_1)/pmax(abs(data$R_alternative_1), abs(data$x_reduced)) # distance to eq 1
#data$dist_R_alt_2 = abs(data$x_reduced - data$R_alternative_2)/pmax(abs(data$R_alternative_2), abs(data$x_reduced)) # distance to eq 2
#data$dist_any = pmax(data$dist_R_alt_1, data$dist_R_alt_2)
## Defining a relative absolute functions between a pair of values that deals with values close to 0: if both values are < 10^-3, return 0
RAE = function(pair_values){
if (max(abs(pair_values)) < 10^-3){
return(0)
}
return(abs(pair_values[1] - pair_values[2])/max(abs(pair_values[1]), abs(pair_values[2])))
}
# computing RAEs
data$dist_pred = apply(data[,c("x_reduced", "R_predicted")], FUN = RAE, MARGIN = 1) # distance to predicted equilibrium
data$dist_R_alt_1 = apply(data[,c("x_reduced", "R_alternative_1")], FUN = RAE, MARGIN = 1) # distance to eq 1
data$dist_R_alt_2 = apply(data[,c("x_reduced", "R_alternative_2")], FUN = RAE, MARGIN = 1) # distance to eq 2
data$dist_any = pmin(data$dist_R_alt_1, data$dist_R_alt_2)
data_melted = melt(data,
measure.vars = c("dist_pred", 'dist_any'),
variable.name = 'Metric',
value.name = 'Relative_absolute_error')
# label for panels
metric.lab = c('Distance to predicted eq.', 'distance to closest eq.')
names(metric.lab) = c('dist_pred', 'dist_any')
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind, labeller = labeller(Metric = metric.lab)) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
xlab(expression(paste('Dispersal rate (', mu, ')'))) +
ylab('Relative absoulte error') +
scale_color_discrete('Allee effect threshold') +
scale_fill_discrete('Allee effect threshold') +
scale_shape_discrete('Allee effect threshold') +
theme(legend.position = 'bottom') +
theme_bw()
ggsave('RAE_bistable.pdf', width = 210, height = 148, unit = 'mm')
ggplot(data = data_melted, mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c), shape = as.factor(c))) +
geom_point(alpha = 0.3) +
facet_grid(Metric ~ kind, labeller = labeller(Metric = metric.lab)) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, fill = as.factor(c)),
color = 'transparent',
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = median,
geom = 'ribbon', alpha = 0.2) +
stat_summary(
mapping = aes(x = mu, y = Relative_absolute_error, color = as.factor(c)),
fun = median,
geom = 'line') +
xlab(expression(paste('Dispersal rate (', mu, ')'))) +
ylab('Relative absoulte error') +
scale_color_discrete('Allee effect threshold') +
scale_fill_discrete('Allee effect threshold') +
scale_shape_discrete('Allee effect threshold') +
theme_bw() +
theme(legend.position = 'bottom')
ggsave('RAE_bistable.pdf', width = 210, height = 148, unit = 'mm')
library(deSolve)
plot_isocline = function(par){
x_isocline = seq(0, 1, 0.01)
par$r = c(0.1)
growth = unlist(allee_mortality(1, x_isocline, par))
disp = 1 * unlist(social_dispersal(1, x_isocline, par))
plot(x_isocline, growth/x_isocline, type = 'l', color = 'green')
points(x_isocline, disp/x_isocline, type = 'l', color = 'red')
}
plot_isocline(par)
calc_m1(par)
library(deSolve)
source('metapop_dynamics.R')
source('Growth_functions.R')
source('Dispersal_functions.R')
x_init = c(3, 0)
t = seq(1, 100)
W = matrix(c(0, 1, 0, 0), nrow = 2)
par = list(r = c(1, -1),
K = 50,
pi = 1,
delta0 = 0.1,
p = 0,
Dns0 = 0.1,
Ds0 = 0.1,
S = 25)
out = ode(y = x_init,
times = t,
func = metapop_dynamics,
parms = par,
growth_function = allee_mortality,
dispersal_function = social_dispersal,
W = W)
plot(out)
